{
  "address": "0xB2b580ce436E6F77A5713D80887e14788Ef49c9A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "arr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "xs",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "s",
          "type": "string"
        }
      ],
      "name": "bar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "foos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "y",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getArrays",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[5]",
          "name": "",
          "type": "uint256[5]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLengths",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notUpdateFoo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "y",
              "type": "string"
            }
          ],
          "internalType": "struct TrySolidity1.Foo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_x",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_y",
          "type": "string"
        }
      ],
      "name": "setFoo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testFind",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "testMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testRevert",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_y",
          "type": "string"
        }
      ],
      "name": "updateFoo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "y",
              "type": "string"
            }
          ],
          "internalType": "struct TrySolidity1.Foo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbd4ce8614e1a77779d4987a9f3eb877ee410835f04c36c435901220656f7581c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xB2b580ce436E6F77A5713D80887e14788Ef49c9A",
    "transactionIndex": 0,
    "gasUsed": "1356173",
    "logsBloom": "0x
    "blockHash": "0xdb2c58c65e9b9888f0ff16c7e541e0501e73497be9bd05ed58862564b264eddd",
    "transactionHash": "0xbd4ce8614e1a77779d4987a9f3eb877ee410835f04c36c435901220656f7581c",
    "logs": [],
    "blockNumber": 14473594,
    "cumulativeGasUsed": "1356173",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "eb08c468ab781e4244e47f48238a9e5d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"xs\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"bar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"foos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArrays\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLengths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notUpdateFoo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"}],\"internalType\":\"struct TrySolidity1.Foo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_x\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_y\",\"type\":\"string\"}],\"name\":\"setFoo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testFind\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"testMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testRevert\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_y\",\"type\":\"string\"}],\"name\":\"updateFoo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"}],\"internalType\":\"struct TrySolidity1.Foo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/solidity/TrySolidity1.sol\":\"TrySolidity1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/solidity/TrySolidity1.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n// foo, bar, baz, qux, quux, quuz, corge, grault,\\n// garply, waldo, fred, plugh, xyzzy, thud\\n\\nlibrary TrySolidityLib1 {\\n    // internal means that function max is embedded in the calling contract\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x >= y ? x : y;\\n    }\\n\\n    // we're going to call this on contract state var\\n    // so we use \\\"storage\\\" data location\\n    function find(uint256[] storage arr, uint256 x)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        for (uint256 i = 0; i < arr.length; i++) {\\n            if (arr[i] == x) {\\n                return i;\\n            }\\n        }\\n        revert(\\\"not found\\\");\\n    }\\n}\\n\\ncontract TrySolidity1 {\\n    using TrySolidityLib1 for uint256[];\\n\\n    function testMax(uint256 x, uint256 y) external pure returns (uint256) {\\n        return TrySolidityLib1.max(x, y);\\n    }\\n\\n    uint256[] public arr = [3, 2, 1];\\n\\n    function testFind() external view returns (uint256) {\\n        // return TrySolidityLib1.find(arr, 2);\\n        return arr.find(2);\\n    }\\n\\n    // like constant but initializes on contract deploy\\n    // uses less Gas\\n    address public immutable owner = msg.sender;\\n\\n    uint256[] private amounts;\\n    // can't push and pop from fixed-size arrays\\n    uint256[5] private ids = [1, 2, 3, 4, 5];\\n\\n    function getArrays()\\n        external\\n        view\\n        returns (uint256[] memory, uint256[5] memory)\\n    {\\n        return (amounts, ids);\\n    }\\n\\n    struct Foo {\\n        uint256 x;\\n        string y;\\n    }\\n\\n    function getLengths() external view returns (uint256, uint256) {\\n        return (amounts.length, ids.length);\\n    }\\n\\n    mapping(address => Foo) public foos;\\n\\n    function setFoo(uint256 _x, string memory _y) external {\\n        foos[msg.sender] = Foo({x: _x, y: _y});\\n    }\\n\\n    function updateFoo(string memory _y) external returns (Foo memory) {\\n        // ERROR: Data location must be \\\"storage\\\", \\\"memory\\\" or\\n        // \\\"calldata\\\" for variable, but none was given\\n        // Foo s = foos[msg.sender];\\n\\n        Foo storage s = foos[msg.sender];\\n        s.y = _y;\\n        return s;\\n    }\\n\\n    function notUpdateFoo() external view returns (Foo memory) {\\n        Foo memory s = foos[msg.sender];\\n        s.y = \\\"not updated\\\";\\n        return s;\\n    }\\n\\n    function bar(uint256[] calldata xs, string calldata s) external {\\n        // no copying, saves Gas\\n        _barNoCopy(xs, s);\\n        // copy each element in xs and s, Gas wasted\\n        _barCopy(xs, s);\\n    }\\n\\n    function _barCopy(uint256[] memory, string memory) private {}\\n\\n    function _barNoCopy(uint256[] calldata xs, string calldata s) private {}\\n\\n    function testRevert() external pure returns (uint256[] memory) {\\n        uint256[] memory memArr = new uint256[](3);\\n        memArr[1] = 10;\\n\\n        revert(\\\"fucked up\\\");\\n\\n        return memArr;\\n    }\\n}\\n\",\"keccak256\":\"0xdcd664f770ba91aa49f5687cc9bf94fbae0d66f81fd58c5012b0183ff61f7939\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60a06040526040518060600160405280600360ff168152602001600260ff168152602001600160ff1681525060009060036200003d929190620000d3565b503373ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152506040518060a00160405280600160ff168152602001600260ff168152602001600360ff168152602001600460ff168152602001600560ff168152506002906005620000be9291906200012a565b50348015620000cc57600080fd5b5062000193565b82805482825590600052602060002090810192821562000117579160200282015b8281111562000116578251829060ff16905591602001919060010190620000f4565b5b50905062000126919062000174565b5090565b826005810192821562000161579160200282015b8281111562000160578251829060ff169055916020019190600101906200013e565b5b50905062000170919062000174565b5090565b5b808211156200018f57600081600090555060010162000175565b5090565b6080516113e7620001af600039600061064d01526113e76000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063835306bd11610071578063835306bd146101a25780638da5cb5b146101d3578063a26388bb146101f1578063a53cce941461020f578063a973e27c1461022b578063fd966c5b14610249576100b4565b806311b90581146100b95780635e205df2146100d75780636a0548ea146100f357806371e5ee5f14610123578063800bd5c814610153578063834db42114610172575b600080fd5b6100c1610268565b6040516100ce9190610aea565b60405180910390f35b6100f160048036038101906100ec9190610bdb565b61039f565b005b61010d60048036038101906101089190610d8c565b610440565b60405161011a9190610aea565b60405180910390f35b61013d60048036038101906101389190610e01565b610554565b60405161014a9190610e3d565b60405180910390f35b61015b610578565b604051610169929190610e58565b60405180910390f35b61018c60048036038101906101879190610e81565b61058b565b6040516101999190610e3d565b60405180910390f35b6101bc60048036038101906101b79190610f1f565b61059f565b6040516101ca929190610f96565b60405180910390f35b6101db61064b565b6040516101e89190610fd5565b60405180910390f35b6101f961066f565b604051610206919061109f565b60405180910390f35b610229600480360381019061022491906110c1565b61071c565b005b61023361079e565b6040516102409190610e3d565b60405180910390f35b6102516107ba565b60405161025f9291906111a1565b60405180910390f35b61027061091c565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820180546102d690611200565b80601f016020809104026020016040519081016040528092919081815260200182805461030290611200565b801561034f5780601f106103245761010080835404028352916020019161034f565b820191906000526020600020905b81548152906001019060200180831161033257829003601f168201915b50505050508152505090506040518060400160405280600b81526020017f6e6f74207570646174656400000000000000000000000000000000000000000081525081602001819052508091505090565b6103ab84848484610861565b61043a848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610867565b50505050565b61044861091c565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050828160010190805190602001906104a3929190610936565b5080604051806040016040529081600082015481526020016001820180546104ca90611200565b80601f01602080910402602001604051908101604052809291908181526020018280546104f690611200565b80156105435780601f1061051857610100808354040283529160200191610543565b820191906000526020600020905b81548152906001019060200180831161052657829003601f168201915b505050505081525050915050919050565b6000818154811061056457600080fd5b906000526020600020016000915090505481565b6000806001805490506005915091509091565b6000610597838361086b565b905092915050565b60076020528060005260406000206000915090508060000154908060010180546105c890611200565b80601f01602080910402602001604051908101604052809291908181526020018280546105f490611200565b80156106415780601f1061061657610100808354040283529160200191610641565b820191906000526020600020905b81548152906001019060200180831161062457829003601f168201915b5050505050905082565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606000600367ffffffffffffffff81111561068e5761068d610c61565b5b6040519080825280602002602001820160405280156106bc5781602001602082028036833780820191505090505b509050600a816001815181106106d5576106d4611232565b5b6020026020010181815250506040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610713906112ad565b60405180910390fd5b604051806040016040528083815260200182815250600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001019080519060200190610796929190610936565b509050505050565b60006107b56002600061088590919063ffffffff16565b905090565b60606107c46109bc565b600160028180548060200260200160405190810160405280929190818152602001828054801561081357602002820191906000526020600020905b8154815260200190600101908083116107ff575b5050505050915080600580602002604051908101604052809291908260058015610852576020028201915b81548152602001906001019080831161083e575b50505050509050915091509091565b50505050565b5050565b60008183101561087b578161087d565b825b905092915050565b600080600090505b83805490508110156108da57828482815481106108ad576108ac611232565b5b906000526020600020015414156108c75780915050610916565b80806108d2906112fc565b91505061088d565b506040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090d90611391565b60405180910390fd5b92915050565b604051806040016040528060008152602001606081525090565b82805461094290611200565b90600052602060002090601f01602090048101928261096457600085556109ab565b82601f1061097d57805160ff19168380011785556109ab565b828001600101855582156109ab579182015b828111156109aa57825182559160200191906001019061098f565b5b5090506109b891906109de565b5090565b6040518060a00160405280600590602082028036833780820191505090505090565b5b808211156109f75760008160009055506001016109df565b5090565b6000819050919050565b610a0e816109fb565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a4e578082015181840152602081019050610a33565b83811115610a5d576000848401525b50505050565b6000601f19601f8301169050919050565b6000610a7f82610a14565b610a898185610a1f565b9350610a99818560208601610a30565b610aa281610a63565b840191505092915050565b6000604083016000830151610ac56000860182610a05565b5060208301518482036020860152610add8282610a74565b9150508091505092915050565b60006020820190508181036000830152610b048184610aad565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610b4557610b44610b20565b5b8235905067ffffffffffffffff811115610b6257610b61610b25565b5b602083019150836020820283011115610b7e57610b7d610b2a565b5b9250929050565b60008083601f840112610b9b57610b9a610b20565b5b8235905067ffffffffffffffff811115610bb857610bb7610b25565b5b602083019150836001820283011115610bd457610bd3610b2a565b5b9250929050565b60008060008060408587031215610bf557610bf4610b16565b5b600085013567ffffffffffffffff811115610c1357610c12610b1b565b5b610c1f87828801610b2f565b9450945050602085013567ffffffffffffffff811115610c4257610c41610b1b565b5b610c4e87828801610b85565b925092505092959194509250565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c9982610a63565b810181811067ffffffffffffffff82111715610cb857610cb7610c61565b5b80604052505050565b6000610ccb610b0c565b9050610cd78282610c90565b919050565b600067ffffffffffffffff821115610cf757610cf6610c61565b5b610d0082610a63565b9050602081019050919050565b82818337600083830152505050565b6000610d2f610d2a84610cdc565b610cc1565b905082815260208101848484011115610d4b57610d4a610c5c565b5b610d56848285610d0d565b509392505050565b600082601f830112610d7357610d72610b20565b5b8135610d83848260208601610d1c565b91505092915050565b600060208284031215610da257610da1610b16565b5b600082013567ffffffffffffffff811115610dc057610dbf610b1b565b5b610dcc84828501610d5e565b91505092915050565b610dde816109fb565b8114610de957600080fd5b50565b600081359050610dfb81610dd5565b92915050565b600060208284031215610e1757610e16610b16565b5b6000610e2584828501610dec565b91505092915050565b610e37816109fb565b82525050565b6000602082019050610e526000830184610e2e565b92915050565b6000604082019050610e6d6000830185610e2e565b610e7a6020830184610e2e565b9392505050565b60008060408385031215610e9857610e97610b16565b5b6000610ea685828601610dec565b9250506020610eb785828601610dec565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eec82610ec1565b9050919050565b610efc81610ee1565b8114610f0757600080fd5b50565b600081359050610f1981610ef3565b92915050565b600060208284031215610f3557610f34610b16565b5b6000610f4384828501610f0a565b91505092915050565b600082825260208201905092915050565b6000610f6882610a14565b610f728185610f4c565b9350610f82818560208601610a30565b610f8b81610a63565b840191505092915050565b6000604082019050610fab6000830185610e2e565b8181036020830152610fbd8184610f5d565b90509392505050565b610fcf81610ee1565b82525050565b6000602082019050610fea6000830184610fc6565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006110288383610a05565b60208301905092915050565b6000602082019050919050565b600061104c82610ff0565b6110568185610ffb565b93506110618361100c565b8060005b83811015611092578151611079888261101c565b975061108483611034565b925050600181019050611065565b5085935050505092915050565b600060208201905081810360008301526110b98184611041565b905092915050565b600080604083850312156110d8576110d7610b16565b5b60006110e685828601610dec565b925050602083013567ffffffffffffffff81111561110757611106610b1b565b5b61111385828601610d5e565b9150509250929050565b600060059050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b6111538161111d565b61115d8184611128565b925061116882611133565b8060005b83811015611199578151611180878261101c565b965061118b8361113d565b92505060018101905061116c565b505050505050565b600060c08201905081810360008301526111bb8185611041565b90506111ca602083018461114a565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061121857607f821691505b6020821081141561122c5761122b6111d1565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f6675636b65642075700000000000000000000000000000000000000000000000600082015250565b6000611297600983610f4c565b91506112a282611261565b602082019050919050565b600060208201905081810360008301526112c68161128a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611307826109fb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561133a576113396112cd565b5b600182019050919050565b7f6e6f7420666f756e640000000000000000000000000000000000000000000000600082015250565b600061137b600983610f4c565b915061138682611345565b602082019050919050565b600060208201905081810360008301526113aa8161136e565b905091905056fea2646970667358221220ccf7e0c6bc9e3d9f9eb1be3b65e7d74342f89d48e049ac2ab01c26dfc258ca2264736f6c634300080a0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4310,
        "contract": "contracts/solidity/TrySolidity1.sol:TrySolidity1",
        "label": "arr",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4328,
        "contract": "contracts/solidity/TrySolidity1.sol:TrySolidity1",
        "label": "amounts",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4338,
        "contract": "contracts/solidity/TrySolidity1.sol:TrySolidity1",
        "label": "ids",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)5_storage"
      },
      {
        "astId": 4377,
        "contract": "contracts/solidity/TrySolidity1.sol:TrySolidity1",
        "label": "foos",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(Foo)4358_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Foo)4358_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TrySolidity1.Foo)",
        "numberOfBytes": "32",
        "value": "t_struct(Foo)4358_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Foo)4358_storage": {
        "encoding": "inplace",
        "label": "struct TrySolidity1.Foo",
        "members": [
          {
            "astId": 4355,
            "contract": "contracts/solidity/TrySolidity1.sol:TrySolidity1",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4357,
            "contract": "contracts/solidity/TrySolidity1.sol:TrySolidity1",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}